---
data_dir: /vector-data-dir
api:
  enabled: true
  address: 0.0.0.0:8686

#
# Sources
#

sources:
  journald_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6000

  kubernetes_source:
    type: vector
    version: "2"
    address: 0.0.0.0:6010

  syslog_source:
    type: syslog
    address: 0.0.0.0:6020
    mode: tcp

#
# Transforms
#

transforms:
  kubernetes_remap:
    type: remap
    inputs: ["kubernetes_source"]
    source: |
      # Standardize 'app' index
      .custom_app_name = .pod_labels."app.kubernetes.io/name" || .pod_labels.app || .pod_labels."k8s-app" || "unknown"
      # Drop pod_labels
      del(.pod_labels)

  # Route Kubernetes logs for special processing
  kubernetes_route:
    type: route
    inputs: ["kubernetes_remap"]
    route:
      home_assistant: '.custom_app_name == "home-assistant"'
      other: '.custom_app_name != "home-assistant"'

  # Parse Home Assistant logs
  home_assistant_remap:
    type: remap
    inputs: ["kubernetes_route.home_assistant"]
    source: |
      # Remove ANSI color codes
      .message = replace!(.message, r'\x1b\[[0-9;]*m', "")
      
      # Parse Home Assistant log format
      parsed, err = parse_regex(.message, r'^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>\w+) \((?P<thread>[^)]+)\) \[(?P<component>[^\]]+)\] (?P<msg>.+)$')
      
      if err == null {
        # Successfully parsed
        .timestamp_parsed = parsed.timestamp
        .level = parsed.level
        .thread = parsed.thread
        .component = parsed.component
        .msg = parsed.msg
        
        # Further parse component into parts
        component_parts = split!(parsed.component, ".")
        .component_type = component_parts[0]
        .component_name = get(component_parts, [1]) ?? ""
        .component_submodule = get(component_parts, [2]) ?? ""
        
        # Set severity based on log level
        .severity = downcase!(parsed.level)
        
        # Clean up - remove the original message field to save space
        del(.message)
      } else {
        # Failed to parse - keep original message
        .parse_error = "failed_to_parse_home_assistant_log"
      }

#
# Sinks
#

sinks:
  journald:
    inputs: ["journald_source"]
    type: loki
    endpoint: http://loki-gateway.observability.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      hostname: '{{ host }}'
      source: 'journald'

  # Home Assistant logs with parsed fields
  home_assistant:
    inputs: ["home_assistant_remap"]
    type: loki
    endpoint: http://loki-gateway.observability.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      app: 'home-assistant'
      namespace: '{{ kubernetes.pod_namespace }}'
      node: '{{ kubernetes.pod_node_name }}'
      source: 'kubernetes'
      level: '{{ level }}'
      component: '{{ component_type }}'
      component_name: '{{ component_name }}'

  # All other Kubernetes logs
  kubernetes:
    inputs: ["kubernetes_route.other"]
    type: loki
    endpoint: http://loki-gateway.observability.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      app: '{{ custom_app_name }}'
      namespace: '{{ kubernetes.pod_namespace }}'
      node: '{{ kubernetes.pod_node_name }}'
      source: 'kubernetes'

  syslog:
    inputs: ["syslog_source"]
    type: loki
    endpoint: http://loki-gateway.observability.svc.cluster.local
    encoding: { codec: json }
    out_of_order_action: accept
    remove_label_fields: true
    remove_timestamp: true
    labels:
      source: 'syslog'