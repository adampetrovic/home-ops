# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: radarr
spec:
  interval: 15m
  chartRef:
    kind: OCIRepository
    name: app-template
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
      strategy: rollback
  uninstall:
    keepHistory: false
  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: 'true'
        initContainers:
          01-init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.5.0@sha256:e0c87ce7df39d06b93f27cf2cc6a056611f13faaa88cc07ab4dc8bf7a85d0b11
              pullPolicy: IfNotPresent
            envFrom: &envFrom
              - secretRef:
                  name: radarr-secret
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/radarr
              tag: 5.27.2@sha256:aa84b8341e2b53281bcea4696427861e4ab02ab004cd76a1b3a76d77ea065ac5
            envFrom: *envFrom
            env:
              TZ: "Australia/Sydney"
              RADARR__INSTANCE_NAME: Radarr
              RADARR__PORT: &port 80
              RADARR__APPLICATION_URL: https://radarr.${SECRET_DOMAIN}
              RADARR__LOG_LEVEL: info
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 4Gi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
        pod:
          securityContext:
            runAsUser: 568
            runAsGroup: 568
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch
            supplementalGroups: [100]

    service:
      app:
        controller: radarr
        ports:
          http:
            port: *port
    ingress:
      main:
        enabled: true
        className: internal
        annotations:
          nginx.ingress.kubernetes.io/auth-method: GET
          nginx.ingress.kubernetes.io/auth-url: http://authelia.security.svc.cluster.local/api/verify
          nginx.ingress.kubernetes.io/auth-signin: https://auth.${SECRET_DOMAIN}?rm=$request_method
          nginx.ingress.kubernetes.io/auth-response-headers: Remote-User,Remote-Name,Remote-Groups,Remote-Email
          nginx.ingress.kubernetes.io/auth-snippet: proxy_set_header X-Forwarded-Method $request_method;
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://theme-park.devbu.io/css/base/radarr/nord.css"></head>';
            sub_filter_once on;
        hosts:
          - host: &host radarr.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      config:
        enabled: true
        existingClaim: radarr
      downloads:
        type: nfs
        server: ${SECRET_NFS_DOMAIN}
        path: /volume2/downloads
        globalMounts:
          - path: /downloads
      movies:
        type: nfs
        server: ${SECRET_NFS_DOMAIN}
        path: /volume2/movies
        globalMounts:
          - path: /movies

      movies-kids:
        type: nfs
        server: ${SECRET_NFS_DOMAIN}
        path: /volume2/kids/movies
        globalMounts:
          - path: /kids
